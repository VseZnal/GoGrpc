// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: protogw/deletemem.protogw

package protodeletemem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeletememServiceClient is the client API for DeletememService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeletememServiceClient interface {
	//Удаление записи
	Delete(ctx context.Context, in *DeleteMemRequest, opts ...grpc.CallOption) (*DeleteMemResponse, error)
}

type deletememServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeletememServiceClient(cc grpc.ClientConnInterface) DeletememServiceClient {
	return &deletememServiceClient{cc}
}

func (c *deletememServiceClient) Delete(ctx context.Context, in *DeleteMemRequest, opts ...grpc.CallOption) (*DeleteMemResponse, error) {
	out := new(DeleteMemResponse)
	err := c.cc.Invoke(ctx, "/pb.DeletememService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeletememServiceServer is the server API for DeletememService service.
// All implementations must embed UnimplementedDeletememServiceServer
// for forward compatibility
type DeletememServiceServer interface {
	//Удаление записи
	Delete(context.Context, *DeleteMemRequest) (*DeleteMemResponse, error)
	mustEmbedUnimplementedDeletememServiceServer()
}

// UnimplementedDeletememServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeletememServiceServer struct {
}

func (UnimplementedDeletememServiceServer) Delete(context.Context, *DeleteMemRequest) (*DeleteMemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeletememServiceServer) mustEmbedUnimplementedDeletememServiceServer() {}

// UnsafeDeletememServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeletememServiceServer will
// result in compilation errors.
type UnsafeDeletememServiceServer interface {
	mustEmbedUnimplementedDeletememServiceServer()
}

func RegisterDeletememServiceServer(s grpc.ServiceRegistrar, srv DeletememServiceServer) {
	s.RegisterService(&DeletememService_ServiceDesc, srv)
}

func _DeletememService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeletememServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeletememService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeletememServiceServer).Delete(ctx, req.(*DeleteMemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeletememService_ServiceDesc is the grpc.ServiceDesc for DeletememService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeletememService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DeletememService",
	HandlerType: (*DeletememServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _DeletememService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protogw/deletemem.protogw",
}
